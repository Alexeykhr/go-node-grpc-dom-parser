// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ParserSvcClient is the client API for ParserSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParserSvcClient interface {
	Html(ctx context.Context, in *HtmlRequest, opts ...grpc.CallOption) (*HtmlResponse, error)
	Image(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*ImageResponse, error)
}

type parserSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewParserSvcClient(cc grpc.ClientConnInterface) ParserSvcClient {
	return &parserSvcClient{cc}
}

func (c *parserSvcClient) Html(ctx context.Context, in *HtmlRequest, opts ...grpc.CallOption) (*HtmlResponse, error) {
	out := new(HtmlResponse)
	err := c.cc.Invoke(ctx, "/parser.ParserSvc/Html", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parserSvcClient) Image(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*ImageResponse, error) {
	out := new(ImageResponse)
	err := c.cc.Invoke(ctx, "/parser.ParserSvc/Image", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParserSvcServer is the server API for ParserSvc service.
// All implementations must embed UnimplementedParserSvcServer
// for forward compatibility
type ParserSvcServer interface {
	Html(context.Context, *HtmlRequest) (*HtmlResponse, error)
	Image(context.Context, *ImageRequest) (*ImageResponse, error)
	mustEmbedUnimplementedParserSvcServer()
}

// UnimplementedParserSvcServer must be embedded to have forward compatible implementations.
type UnimplementedParserSvcServer struct {
}

func (UnimplementedParserSvcServer) Html(context.Context, *HtmlRequest) (*HtmlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Html not implemented")
}
func (UnimplementedParserSvcServer) Image(context.Context, *ImageRequest) (*ImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Image not implemented")
}
func (UnimplementedParserSvcServer) mustEmbedUnimplementedParserSvcServer() {}

// UnsafeParserSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParserSvcServer will
// result in compilation errors.
type UnsafeParserSvcServer interface {
	mustEmbedUnimplementedParserSvcServer()
}

func RegisterParserSvcServer(s grpc.ServiceRegistrar, srv ParserSvcServer) {
	s.RegisterService(&ParserSvc_ServiceDesc, srv)
}

func _ParserSvc_Html_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HtmlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParserSvcServer).Html(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parser.ParserSvc/Html",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParserSvcServer).Html(ctx, req.(*HtmlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParserSvc_Image_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParserSvcServer).Image(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parser.ParserSvc/Image",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParserSvcServer).Image(ctx, req.(*ImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ParserSvc_ServiceDesc is the grpc.ServiceDesc for ParserSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParserSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "parser.ParserSvc",
	HandlerType: (*ParserSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Html",
			Handler:    _ParserSvc_Html_Handler,
		},
		{
			MethodName: "Image",
			Handler:    _ParserSvc_Image_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "parser.proto",
}
